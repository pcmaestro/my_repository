##METODOS PYQT5

IMPORTANTE- pyQt5 en el código MainWindow no crea los objetos con constructores,  indica las propiedades
mediante funciones,  esta es una opción que da Python, pero que no se usa en la programación normal

from PyQt5 import QtCore, QtGui, , uic, QtWidgets
import sys

****Si hay otros módulos con funciones y ventanas, también hay que hacer el import****

****Ese IF se añade siempre para asegurar la aplicación de pyqt5 se ejecuta en el archivo que queremos***

if __name__ == "__main__":

__name__ es una variable global cuyo valor depende de donde esté :

   1) si está en el archivo de python desde el que arrancamos
  la variable __name__ vale "__main__"

   2) si está en otro archivo que hayamos importado 
  la variable __name__ vale el nombre de dicho archivo o modulo de pyhton


#linea obligatoria para usar pyqt5 , en la variable app instanciamos el objeto de la aplicación de pyqt5
app = QtWidgets.QApplication([])

######################################### Usando diseños sin el QtDesigner ##################################################

#Creamos la aplicacion de pyqt5
app = QApplication([])

#Objeto de la clase QWidget que representa una ventana
w = QWidget() 

#Modelamos la ventana
w.resize(250,150)
w.move(300,300)

#Titulo de la ventana
w.setWindowTitle("Ventana creada sin designer")

#Mostramos la ventana
w.show()

#La ventana no se cierra mientras no finalice la aplicación pyqt5
sys.exit(app.exec_())


###################################### Usando diseños .ui del QtDesigner ####################################################

#win es el interfaz creado a partir de el siguiente archivo de diseño,  lo cargamos con uic.loadUi()

win = uic.loadUi("ventana_ejemplo.ui")

#de esta forma se va a ejecutar la funcion que hayamos definido al pulsar un boton del diseño 
( en este ejemplo al objeto lo hemos llamdado "boton_pulsame" ) , método clicked.connect()

win.boton_pulsame.clicked.connect(boton_pulsado)
	
#mostramos la ventana la ventana, método show()

win.show()

#la aplicacion no cierra hasta que no termine app
sys.exit(app.exec_())

#################################### Usando diseños convertidos de .ui en .py ###############################################

Mediante la consola de Windows debemos usar el compilador de intefaz pyuic5 :
	
	De forma sencilla lo podemos hacer mediante 
		pyuic5 ventana_principa.ui > ventana_principal.py

	Pero es recomendable hacerlo mejor mediante
		pyuic5 -x -o ventana_principal.py ventana_princial.ui

El segundo método añade en el archivo .py el if __name__ = "__main__"

#linea obligatoria para usar pyqt5 , creamos la aplicación, aqui hay que darle como argumento
#el módulo sys.argv de QT
app = QtWidgets.QApplication(sys.argv)

#Preparamos un MainWindow (ventana principal) de pyqt5, esto seria parte del codigo recomendado de pyqt5
MainWindow = QtWidgets.QMainWindow()

#Ahora creamos un objeto de la clase en el archivo generado y lo usa para preparar la ventana principal
#llamada MainWindow para que tenga todo lo que pusimos en el designer, en este ejemplo llammaos al
#objeto "ui"
ui = ventana_python.Ui_MainWindow()
ui.setupUi(MainWindow)

#Line text ( cajas de texto) .  En este ejemplo al objeto Line text lo hemos llamado "input_usuario",
#con text() capturamos lo que escribe

introducido = ui.input_usuario.text()

#De esta manera mostramos el resultado de la operacion que se haya realizado por detrás en un label que
#que habremos creado previamente sin texto, utilizamos setText()

ui.label_resultado.setText("resultado obtenido en la operacion")

#Todos los componentes puestos en la ventana por el Designer estan en el objeto "ui" que hemos creado previamente
ui.boton_convertir_a_dolares.clicked.connect(transformar_a_dolares)

####################################### PROGRAMCION ORIENTADA A OBJETOS ##########################################

En este caso creamos una clase ( Mi_clase() ) que hereda del módulo pre-construido de pyQt5 QDialog , traemos el módulo del archivo PY 
desde el paquete ventanas. Dentro de la clase instanciamos un objeto de la clase Ui_* generada en el archivo PY
y le aplicamos la función setupUI() de dicha clase, luego vamos asignando funciones a los eventos en nuestra ventana.
Por úlitmo, creamos las funciones que serán llamadas por los eventos, en el caso del ejemplo, para el click sobre un
botón tras escribir algo el usuario en una caja de texto

Una vez definida la clase,  le instanciamos un objeto ( mi_objeto ) , esto ejecutará automáticamente todo lo definido
en el constructor de la clase que hemos creado

from PyQt5.QtWidgets import QApplication, QDialog

import sys

from ventanas import ventana

class Mi_clase(QDialog):
	def __init__(self):
		super().__init__()
		self.ui = ventana.Ui_clase_del_archivo_PY()
		self.ui.setupUI(self)
		self.ui.boton_que_hemos_creado.clicked.connect(self.funcion_para_un_boton)
		self.show()

	def funcion_para_un_boton(self):
		input_usuario = self.ui.Label_caja_texto.text()
		self.ui.accion_con_el_texto_recogido

#End of Mi_clase

if __name__ == "__main__":

	app = QApplication(sys.argv)

	mi_objeto = Mi_clase()

	sys.exit(app.exec_())

################################ VENTANAS DE ALERTA / DIALOGO ######################

Esto requiere importar Qmessagebox

Qmessagebox.information(self, "cadena de caracteres")


################################  EVENTOS PYQT5 ####################################

------------	Eventos sobre Pushbutton	------------------------------------

clicked.connect(self.funcion) --> Ejecuta la función asociada al click sobre un botón

------------	Eventos sobre un MenuBar	------------------------------------

triggered.connect(self.funcion) --> Ejecuta la función asociado al click sobre un menú

------------	Eventos sobre un radiobutton / Checkbox	------------------------------------

toggled.connect(self.funcion) --> Ejecuta la función asociada al click sobre un radiobutton

isClicked() --> Ejecuta la comprabación de si un radiobutton está clickado

statechanged() -- > Ejecuta la comprobación de si un checkbox está clickado

------------	Eventos sobre Line Text / Text Edit	----------------------------

text() --> Lee el contenido de un Line Text o un Text Edit

setText() --> Escribe texto en un Line Text o un Text Edit

setFocus() --> Establece el cursor en un Line Text o un Text Edit determinados

-------------	Eventos sobre un List Widget	-------------------------------------

itemClicked() --> Ejecuta la función asociada a la selección de un elemento de una lista (List Widget)

itemSelectionChanged() -- > Ejecuta la función asociada a la selección de varios elementos de una lista (List Widget)

currentItem() --> Identifica el elemento seleccionado con itemClicked() , en la forma currentItem().text() 
		  sirve para leer el texto seleccionado , pero se puede guardar en una variable

selectedItems() --> Identifica los elementos seleccionados con itemSelectionChanged()


addItem() --> Añade elementos a un List Widget , si son varios seleccionados con selectedItems() , hay que usar
	      un bucle for para añadirlos.  Ej :

	      elementos = xxxxxxxx.selectedItems()

	      for elemento in elementos:
	          xxxxxxxx.addItem(elemento)

addItems() --> Para añadir más de un elemento


currentRow() --> Selecciona una linea de un List Widget para actuar sobre ella

takeItem() --> Elimina la linea seleccionada con currentRow()

insertItem() --> Inserta un nuevo elemento en la linea seleccionada con currentRow()

getText(titulo_ventana, label_caja_texto) --> Crea una pequeña ventana tipo window.prompt para escribir una nueva cadena de texto

clear() --> Limpia de elementos un List Widget ( si existe alguno)


-------------	Eventos sobre un Table Widget	----------------------------------------

Una tabla es una matriz de dos dimensiones , osea ,  una lista que contiene tuplas, con lo cual hay que recorrerla con bucles anidados
Los elementos de una fila estarán incluidos en una tupla (con lo que cada elemento pertenecerá a una columna distinta):

for tupla in lista:  ### Cada tupla representa una fila distina
    fila = 0    
    for elemento in tupla:  ### Cada elemento de una tupla pertenece a una columna distinta
	columna = 0
	celda = QTableWidgetElement(elemento) ###Agrega elementos a una celda
	self.ui.objeto_tabla.setItem(fila, columna, celda) ###Agrega las celdas a la tabla
	columna += 1
   fila += 1


















