##METODOS PYQT5

IMPORTANTE- pyQt5 en el código MainWindow no crea los objetos con constructores,  indica las propiedades
mediante funciones,  esta es una opción que da Python, pero que no se usa en la programación normal

from PyQt5 import QtCore, QtGui, , uic, QtWidgets
import sys

****Si hay otros módulos con funciones y ventanas, también hay que hacer el import****

****Ese IF se añade siempre para asegurar la aplicación de pyqt5 se ejecuta en el archivo que queremos***

if __name__ == "__main__":

__name__ es una variable global cuyo valor depende de donde esté :

   1) si está en el archivo de python desde el que arrancamos
  la variable __name__ vale "__main__"

   2) si está en otro archivo que hayamos importado 
  la variable __name__ vale el nombre de dicho archivo o modulo de pyhton


#linea obligatoria para usar pyqt5 , en la variable app instanciamos el objeto de la aplicación de pyqt5
app = QtWidgets.QApplication([])

######################################### Usando diseños sin el QtDesigner ##################################################

#Creamos la aplicacion de pyqt5
app = QApplication([])

#Objeto de la clase QWidget que representa una ventana
w = QWidget() 

#Modelamos la ventana
w.resize(250,150)
w.move(300,300)

#Titulo de la ventana
w.setWindowTitle("Ventana creada sin designer")

#Mostramos la ventana
w.show()

#La ventana no se cierra mientras no finalice la aplicación pyqt5
sys.exit(app.exec_())


###################################### Usando diseños .ui del QtDesigner ####################################################

#win es el interfaz creado a partir de el siguiente archivo de diseño,  lo cargamos con uic.loadUi()

win = uic.loadUi("ventana_ejemplo.ui")

#de esta forma se va a ejecutar la funcion que hayamos definido al pulsar un boton del diseño 
( en este ejemplo al objeto lo hemos llamdado "boton_pulsame" ) , método clicked.connect()

win.boton_pulsame.clicked.connect(boton_pulsado)
	
#mostramos la ventana la ventana, método show()

win.show()

#la aplicacion no cierra hasta que no termine app
sys.exit(app.exec_())

######################### Usando diseños convertidos de .ui en .py con programación estructurada #############################

Mediante la consola de Windows debemos usar el compilador de intefaz pyuic5 :
	
	De forma sencilla lo podemos hacer mediante 
		pyuic5 ventana_principa.ui > ventana_principal.py

	Esta otra forma crea las lineas obligatorias que podemos incluir en el main:
		pyuic5 -x -o ventana_principal.py ventana_princial.ui

El segundo método añade en el archivo .py el if __name__ = "__main__" y resto de código obligatorio

#linea obligatoria para usar pyqt5 , creamos la aplicación:

app = QtWidgets.QApplication(sys.argv)

#Preparamos un MainWindow (ventana principal) de pyqt5, esto seria parte del codigo recomendado de pyqt5
MainWindow = QtWidgets.QMainWindow()

#Ahora creamos un objeto de la clase en el archivo generado y lo usa para preparar la ventana principal
#llamada MainWindow para que tenga todo lo que pusimos en el designer, en este ejemplo llammaos al
#objeto "ui":

ui = ventana_python.Ui_MainWindow()
ui.setupUi(MainWindow)

Mostramos el objeto creado:

ui.show()

Y le decimos la interprete que no cierre la ventana hasta que finalice la aplicación (app)

sys.exit(app.exec_())

####################################### PROGRAMCION ORIENTADA A OBJETOS (SIN ENCAPSULACION DE CLASES)##########################################

En este caso creamos una clase ( Mi_clase() ) que hereda del módulo pre-construido de pyQt5 QDialog , traemos el módulo del archivo PY 
desde el paquete ventanas. Dentro de la clase instanciamos un objeto de la clase Ui_* generada en el archivo PY
y le aplicamos la función setupUI() de dicha clase, luego vamos asignando funciones a los eventos en nuestra ventana.
Por úlitmo, creamos las funciones que serán llamadas por los eventos, en el caso del ejemplo, para el click sobre un
botón tras escribir algo el usuario en una caja de texto

Una vez definida la clase,  le instanciamos un objeto ( mi_objeto ) , esto ejecutará automáticamente todo lo definido
en el constructor de la clase que hemos creado

from PyQt5.QtWidgets import QApplication, QDialog

import sys

from ventanas import ventana

class Mi_clase(QDialog):
	def __init__(self):
		super().__init__()
		self.ui = ventana.Ui_clase_del_archivo_PY()
		self.ui.setupUI(self)
		self.ui.boton_que_hemos_creado.clicked.connect(self.funcion_para_un_boton)
		self.show()

	def funcion_para_un_boton(self):
		input_usuario = self.ui.Label_caja_texto.text()
		self.ui.accion_con_el_texto_recogido

#End of Mi_clase

if __name__ == "__main__":

	app = QApplication(sys.argv)

	mi_objeto = Mi_clase()

	sys.exit(app.exec_())

####################### PROGRAMACION ORIENTADA A OBJETOS CON ENCAPSULACION DE CLASES (LA MAS USADA) #####################

Encapsulamos las clases generadas para las ventanas con el compilador pyuic5 con clases que podamos manipular nosotros:

-Organizamos los paquetes Python separando del main las clases autogeneradas por pyuic5 , las clases de encapsulación, las variables,
 las funciones, las imágenes.....todo por separado
-En las clases de encapsulación heredamos de las clases autogeneradas
-Usamos su constructor con super().__init__()
-Usamos su método setupUI con super().setupUI(self, MainWindow)
-En la propiedad self.MainWindow = MainWindow para guardar en ella el objeto creado en el Main
 MainWindow que crea el Qt Designer en cada pantalla (o QDialog, según la plantilla
 que hayamos usado)
-En el setupUI() de cada clase, incluimos los controladores de los widgets de cada pantalla

En el Main tendriamos algo como esto (las clases y resto de elementos ya estará cada una en su paquete):

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    objeto_ventana_principal = clase_ventana_principal.VentanaPrincipal()
    objeto_ventana_principal.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

En clase de encapsulación para la ventana principal , tendriamos algo como esto, herendando de
la clase Ui_MainWindow autogenerada en ventana_principal.py:

class VentanaPrincipal(ventana_principal.Ui_MainWindow):
    
    def __init__(self):
        super().__init__()
        
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        #A partir de aqui añadimos los controladores y eventos de la página principal
        self.submenu_registrar_producto.triggered.connect(self.mostrar_registro_producto)
        self.submenu_table_widget_productos.triggered.connect(self.mostrar_listado_con_table_widget)
        self.MainWindow = MainWindow --> Incluimos el objeto MainWindow creado en el Main como valor
					 de esta propiedad para que sea accesible al resto de métodos
        
    #Añadimos también los métodos para los menús o cualquier otra cosa que requiera la ventana principal
    def mostrar_registro_producto(self):
        self.ventanaRegistro = VentanaRegistrarProducto() --> Esta es la clase que encapsula a ventana_registro.py
        self.ventanaRegistro.setupUi(self.MainWindow)
    
    def mostrar_listado_con_table_widget(self):
        self.ventanaListado = VentanaListadoTableWidget()
        self.ventanaListado.setupUi(self.MainWindow)

Con esta forma de programar,  el UI es representado por self ( ej self.caja_texto.setText("Hola")), hay que crear una
clase de encapsulación para cada clase autorgenerada por pyuic5 , las primeras serán las que podamos modificar y en ellas
iremos añadiendo los métodos que actuarán sobre los widgets de cada ventana



################################ VENTANAS DE ALERTA / DIALOGO ######################

Esto requiere importar Qmessagebox

QMessagebox.information(self, "cadena de caracteres")

QMessagebox.about(self, "Titulo ventana" , "Texto ventana")


################################  EVENTOS PYQT5 ####################################

------------	Eventos sobre Pushbutton	------------------------------------

clicked.connect(self.funcion) --> Ejecuta la función asociada al click sobre un botón

------------	Eventos sobre un MenuBar	------------------------------------

triggered.connect(self.funcion) --> Ejecuta la función asociado al click sobre un menú

Para abrir un archivo:

archivo = QFileDialog.getOpenFileName(self, "Titulo ventana", "C:\\ruta_archivo", "filtro - ej. Text Files (.txt) ")

Esto guarda en archivo la tupla (""C:\\ruta_archivo", "filtro - ej. Text Files (.txt) " , con lo que archivo[0] es la
ruta al archivo que deseamos abrir

Para guardar un arhivo:

archivo = QFileDialog.getSaveFileName(self, "Titulo ventana", "C:\\ruta_archivo", "filtro - ej. Text Files (.txt) ")

En la tupla que trae,  archivo[0] es la ruta, en la ventana de dialogo indicaremos el nombre del fichero a guardar

Para cerrar la aplicacion:

sys.exit(0)


------------	Eventos sobre un radiobutton / Checkbox	------------------------------------

toggled.connect(self.funcion) --> Ejecuta la función asociada al click sobre un radiobutton

isClicked() --> Ejecuta la comprabación de si un radiobutton está clickado

statechanged() -- > Ejecuta la comprobación de si un checkbox está clickado


------------	Eventos sobre Line Text / Text Edit	----------------------------

text() --> Lee el contenido de un Line Text o un Text Edit

setText() --> Escribe texto en un Line Text o un Text Edit

setFocus() --> Establece el cursor en un Line Text o un Text Edit determinados

textChanged.connect() --> Ejecuta la función argumento si hay cambios en la caja de texto

clear() --> Limpia el contenido del widget (usar por ejemplo cuando ya se haya enviado la información)


-------------	Eventos sobre un List Widget	-------------------------------------

itemClicked() --> Ejecuta la función asociada a la selección de un elemento de una lista (List Widget)

itemSelectionChanged() -- > Ejecuta la función asociada a la selección de varios elementos de una lista (List Widget)

currentItem() --> Identifica el elemento seleccionado con itemClicked() , en la forma currentItem().text() 
		  sirve para leer el texto seleccionado , pero se puede guardar en una variable

selectedItems() --> Identifica los elementos seleccionados con itemSelectionChanged()


addItem() --> Añade elementos a un List Widget , si son varios seleccionados con selectedItems() , hay que usar
	      un bucle for para añadirlos.  Ej :

	      elementos = xxxxxxxx.selectedItems()

	      for elemento in elementos:
	          xxxxxxxx.addItem(elemento)

addItems() --> Para añadir más de un elemento


currentRow() --> Selecciona una linea de un List Widget para actuar sobre ella

takeItem() --> Elimina la linea seleccionada con currentRow()

insertItem() --> Inserta un nuevo elemento en la linea seleccionada con currentRow()

getText(titulo_ventana, label_caja_texto) --> Crea una pequeña ventana tipo window.prompt para escribir una nueva cadena de texto

clear() --> Limpia de elementos un List Widget ( si existe alguno)


-------------	Eventos sobre un Table Widget	----------------------------------------

Una tabla es una matriz de dos dimensiones , osea ,  una lista que contiene tuplas, con lo cual hay que recorrerla con bucles anidados
Los elementos de una fila estarán incluidos en una tupla (con lo que cada elemento pertenecerá a una columna distinta):

for tupla in lista:  ### Cada tupla representa una fila distina
    fila = 0    
    for elemento in tupla:  ### Cada elemento de una tupla pertenece a una columna distinta
	columna = 0
	celda = QTableWidgetElement(elemento) ###Agrega elementos a una celda
	self.ui.objeto_tabla.setItem(fila, columna, celda) ###Agrega las celdas a la tabla
	columna += 1
   fila += 1


insertRow(fila) --> Inserta el valor que tenga la variable fila en ese momento

celda = QtableWidgetItem(contenido) --> Establece el contenido de una celda

setItem(fila, columna, celda) --> Inserta el valor que tengan en cada momento, fila, columna y celda

setCellWidget(fila, columna, widget) --> Inserta un widget según el valor que tengan en cada momento fila y celda

setRowCount(nº_filas_a_mostrar) --> Establece la cantidad de filas a mostrar, si es cero ,  limpia la tabla

Ej.

def listado_table_widget():
    global coches
    ui_listado_list_tablewidget.tableWidget.setRowCount(0)
    coches = obtener_coches()
    fila = 0
    for coche in coches:        
        ui_listado_list_tablewidget.tableWidget.insertRow(fila)
        columna = 0        
        for propiedad in coche:
            celda = QTableWidgetItem(str(propiedad))
            ui_listado_list_tablewidget.tableWidget.setItem(fila, columna, celda)
            columna += 1

        #Añadimos un botón eliminar  
        btn_eliminar = QPushButton("Eliminar coche")
        btn_eliminar.clicked.connect( partial(eliminar_coche, coche[0]) )
        ui_listado_list_tablewidget.tableWidget.setCellWidget(fila, columna, btn_eliminar)
        
	#Añadimos un botón editar
        btn_editar = QPushButton("Editar coche")
        btn_editar.clicked.connect( partial(editar_coche, coche[0]) )
        ui_listado_list_tablewidget.tableWidget.setCellWidget(fila, columna +1, btn_editar)
             
        fila += 1


-----------------------  Eventos sobre Slider bar y Scroll bar ---------------------------------------------

valueChanged.connect() --> Ejecuta la función del argumento según van cambiando los valores por el desplazamiento de la barra



-----------------------  Eventos sobre un Spin Box (caja con flechas para aumentar o disminuir valores  -------------

editingFinished.connect() --> Ejecuta la función del argumento según el usuario va aumentando o disminuyendo valores


-----------------------  Eventos sobre Combox  -------------------------------------------------------------------

currentIndexChanged.connect() --> Ejecuta la función del argumento según la opción elegida por el usuario

currentIndex() --> Lo usamos para guardar en una variable (ej. indice_elegido) el indice de la opción elegida

itemText(indice_elegido) --> Lo usamos para guardar en una variable (ej. opcion_elegida) la selección del usuario

-----------------------  Eventos sobre Progress Bar  -----------------------------------------------------------

En este caso hay que ir dandole valores en función de la ejecución de la función que mide, esto lo podemos hacer
dando valores a una variable x en un ciclo while mientras dure la ejecución

Al widget progress bar le vamos a pasar esos valores mediante setValue(x)

Ej

while descarga:
	x += 0.000001

self.ui.progress_bar.setValue(x)


--------------------------- Eventos QLCDNumber  ---------------------------------------

import QLCDNumber

self.lcd_number.displaycount(x) --> x son la cantidad de dígitos a mostrar en el widget

self.ui.lcelfd_number.display(valor_que_viene_de_una_variable)

self.ui.lcd_number.setMode(QLCDNumber.Dec / QLCDNumber.Bin / QLCDNumber.Oct / QLCDNumber.Hex) --> Modos numéricos del widget


--------------------------  Eventos Calendar Widget / Date Edit  --------------------

selectionChanged.connect() --> Ejecuta la función indicada en el argumento

fecha = self.ui.calendar.selectDate() --> Guarda la fecha modificada en el widget

fecha_en_string = str(fecha.toPyDate()) --> Convierte la fecha que viene del widget en una cadena de texto

self.ui.calendar.setDate(fecha) --> Establece en el widget la fecha que la pasemos en la variable fecha

--------------------------  Imagenes  -----------------------------------------------

A la hora de registrar un articulo, normalmente las imagenes se insertan en un objeto Qlabel (en este caso , label_imagen), 
es buena práctica hacer que pasen primero por una carpeta temporal antes de guardar el registro

Seleccionar imagen llamando a una función con este código pulsando un Qpushbutton:

archivo = QFileDialog.getOpenFileName(MainWindow)  --> Esto trae una tupla
ruta_archivo = archivo[0]
shutil.copy(ruta_archivo + "temporal/imagen.jpg")
pixmap = QPixmap("temporal/imagen.jpg")

Adaptamos el tamaño de la imagen al del QLabel:

altura_label = ui.label_imagen.height()
pixmap_redim = pixmap.scaledToHeight(altura_label) --> Esto redimensiona el pixmap,  no la imagen real

Insertamos la imagen:

ui.label_imagen.setPixmap(pixmap_redim)

Movemos la imagen de la carpeta temporal a la definitiva y la renombramos con el id del producto en la BD

id_generado = operaciones_bd.funcion_insert_sql(objeto_a_registrar)
shutil.move("temporal/imagen.jpg", "imagenes/" + str(id_generado) + ".jpg")

Ahora añadimos la imagen como icono, por convención, se nombra con el Id del objeto que representa en la BD,
al consultar la BD para saber el id,  nos traerá la fila en forma de tupla. Hacemos la comprobación para ver
si existe algún icono para el producto en cuestión:

icono = QLabel()
ruta_imagen = ""imagenes/"+str(tupla[0])+".jpg" --> La primera columna de la tupla es el id
objeto_path = pathlib.Path(ruta_imagen) --> Creamos un objeto de la libreria pathlib.Path
existe = objeto_path.is_file() --> Comprueba si la imagen existe en la ruta ( tambien se puede hacer con os.isfile() )
if existe:
	pixmap = QPixmap(ruta_imagen)
	pixmap_redim = pixmap.scaleToHeight(50) --> En este ejemplo redimensionamos a 50 px
	icono.setPixmap(pixmap_redim)
	ui.table_widget.setCellWidget(fila, indice_celda + x , icono) --> Aqui pintamos el icono en una tabla
									  en la posición indice_celda + x













