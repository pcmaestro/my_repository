from flask import Flask, request
from flask.templating import render_template

Creamos el objeto de la apliación Flask:

app = Flask(__name__)

Usamos el decorador app.route para indicar las rutas a las que
se deben aplicar las funciones , as cuales apuntan a los templates
de HTML

Ej.

@app.route("/")
def raiz():
    return render_template("/index.html")

@app.route("/registro-anuncio")
def registro_anuncio():
    return render_template("/registro-anuncio.html")

Usamos request y sus métodos para los formularios , nos referimos a ellos
por el atributo name que tenga definida la etiqueta HTML

request.args.get("name")

Ej.

@app.route("/guardar-anuncio")
def guardar_anuncio():
    texto = request.args.get("texto")
    email = request.args.get("email")
    telefono = request.args.get("telefono")
    anuncio = texto + " contactar en : " + email + str(telefono)
    return anuncio


###Estas dos ultimas líneas sólo son necesarias para ejecuciones en local
Flask.debug = 1  --> Permite refrescar en local los cambios
app.run() --> Ejecuta en local la aplicación

####################  ESTRUCTURA DE DIRECTORIOS NECESARIA ##################

MyApplication/
    /static/
        /style.css
        /script.js
    /templates/
        /index.html
	/other.html
    /app.py

#####################  ENLACES ENTRE ARCHIVOS HTML  ######################

los enlaces <a href = "...."> entre archivos HTML los haremos por el nombre de ruta que tengan
en el app.py

######################  NOTACIONES JINJA ###############################

Jinja es un template language para Python , se usa para incrustar código Phyton
en HTML para que pueda ser renderizado por los navegadores como si del propio HTML
se tratara:

Notaciones para envolver bucles y condicionales:
{%for../if.../elif.../while....%}
{%endfor%} / {%endif%} / {%endwhile%}

Notaciones para envolver código y variables:
{{......}}

####################  ELEMENTOS ESTATICOS ################################

Para usar el archivo CSS y JavaScript estático en la plantilla index.html, necesitamos usar 
el nombre del punto final 'estático' especial:

{{url_for('static', filename = 'style.css')}}

Ej.

<html>
    <head>
        <title>Static File</title>
        <link href="{{url_for('static', filename = 'style.css')}}" rel="stylesheet">
        <script src="{{url_for('static', filename = 'script.js')}}"></script>
    </head>
    <body>
        <h3>Hello World!</h3>
    </body>
</html>
