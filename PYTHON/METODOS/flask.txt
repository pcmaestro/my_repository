pip install flask
pip install flask-mail

from flask import Flask
from flask.globals import request, session
from flask.templating import render_template
from flask_mail import Mail, Message
import string
import random

Creamos el objeto de la apliación Flask:

app = Flask(__name__)

Usamos el decorador app.route para indicar las rutas a las que
se deben aplicar las funciones , as cuales apuntan a los templates
de HTML

Ej.

@app.route("/")
def raiz():
    return render_template("/index.html")

@app.route("/registro-anuncio")
def registro_anuncio():
    return render_template("/registro-anuncio.html")

Usamos request y sus métodos para los formularios , nos referimos a ellos
por el atributo name que tenga definida la etiqueta HTML

request.args.get("name")

Ej.

@app.route("/guardar-anuncio")
def guardar_anuncio():
    texto = request.args.get("texto")
    email = request.args.get("email")
    telefono = request.args.get("telefono")
    anuncio = texto + " contactar en : " + email + str(telefono)
    return anuncio


###Estas dos ultimas líneas sólo son necesarias para ejecuciones en local
Flask.debug = 1  --> Permite refrescar en local los cambios
app.run() --> Ejecuta en local la aplicación

####################  ESTRUCTURA DE DIRECTORIOS NECESARIA ##################

MyApplication/
    /static/
        /style.css
        /script.js
    /templates/
        /index.html
	/other.html
    /app.py

#####################  ENLACES ENTRE ARCHIVOS HTML  ######################

los enlaces <a href = "...."> entre archivos HTML los haremos por el nombre de ruta que tengan
en el app.py

######################  NOTACIONES JINJA ###############################

Jinja es un template language para Python , se usa para incrustar código Phyton
en HTML para que pueda ser renderizado por los navegadores como si del propio HTML
se tratara:

Notaciones para envolver bucles y condicionales:
{%for../if.../elif.../while....%}
{%endfor%} / {%endif%} / {%endwhile%}

Notaciones para envolver código y variables:
{{......}}

####################  ELEMENTOS ESTATICOS ################################

Para usar el archivo CSS y JavaScript estático en la plantilla index.html, necesitamos usar 
el nombre del punto final 'estático' especial:

{{url_for('static', filename = 'style.css')}}

Ej.

<html>
    <head>
        <title>Static File</title>
        <link href="{{url_for('static', filename = 'style.css')}}" rel="stylesheet">
        <script src="{{url_for('static', filename = 'script.js')}}"></script>
    </head>
    <body>
        <h3>Hello World!</h3>
    </body>
</html>

################  VALIDACION DE REGISTROS EN BD POR EMAIL  ###############

Se trata de enviar al usuario un mail de confirmación de registro en una web para confirmar
que su dirección de correo es correcta

En el correo recibe un link que debe clickar, el cual le redirige a una ruta de validación que contiene 
el id de registro y un código alfanumérico de gran longitud (por ej 200 caracteres) que se ha generado 
previanente en Python junto con su registro, al clickar el enlace el módulo Python comprueba que todo 
coincide y valida entonces el registro en la BD

Ej.  formato del enlace :

http://www.elanuncio.com/validar-anuncio?id=16&c=XJjMXy4qnguL9ycn3zKzA780qKaOtM9QXJ4Y0I2s7fXBvaqzn9HjuDBdRBZi

En esta URL podemos ver id= id generado en la BD // c= código de validación generado

LINEAS DE CODIGO NECESARIAS PARA ENVIAR CORREOS DESDE EL SERVIDOR DE GOOGLE (requiere activar validación en dos pasos)

from flask_mail import Mail, Message

app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'mi_correo@gmail.com'
app.config['MAIL_PASSWORD'] = 'gafglhkhkjfjrjfhr' --> Esta clave nos la da Google al activar las contraseñas para aplicaciones
mail = Mail(app)

LINEAS NECESARIAS PARA GENERAR EL CODIGO DE VALIDACION:
import string
import random

letras = string.ascii_letters + "0123456789"
codigo = "".join(random.choices(letras, k = longitud_del_codigo))

Este código lo usaremos en la función de registro en la BD

LINEAS NECESARIAS PARA ENVIAR EL CORREO ELECTRONICO

#Asunto y destinatarios
msg = Message("asunto_del_correo", sender = "mi_correo@gmail.com" , recipients = [lista_emails])

#Correo con texto plano:
msg.body = "texto_del_mensaje"

#Correo con HTML (este método es el usado para enviar el link de validación) :
msg.html = "Para continuar con el proceso, por favor haga click <a href = "http://www.elanuncio.com/validacion-registro?id=2&c=kfaskfasdfenbcgggkernaksici">aqui</a>

#Enviamos el correo
mail.send(msg)


RUTA PARA VALIDAR LA PETICION DE REGISTRO

from flask.globals import request

Podemos leer de la URL ejemplo anterior los datos que se muestran

id = request.args.get("id")
codigo = request.args.get("c")	

Ej.  Función de validación y creción de ruta :

def validar(id, codigo):
	código para validar que "id" y "c" son correctos
	
	return resultado


@app.route("/validar-registro")
def validar_registro():
	id = request.args.get("id")
	codigo = request.args.get("c")	
	resultado = operaciones_bd.validar(id,codigo)
	if resultado == True:
		return render_template("codigo-no-valido.html")
	if resultado == False:
		return render_template("codigo-validado.html")

#####################  METODOS PARA FORMULARIOS  ###################################################

GET --> Usado para traer información
POST --< Usado para subir, modificar o borrar información

GET es el método por defecto en HTML,  para usar POST hay que indicarlo en la etiqueta <form>
En Flask GET también es el método por defecto, y también hay que indicar expresemente POST en
la ruta de los formularios:

Ej.  @app.route("/formularios-registro", methods=["POST","GET"])

Hay dos métodos de lectura con GET y POST

Para leer formularios con GET:

request.args.get("texto"_formulario")  // request.args["texto_formulario"]

Para leer formularios con POST:

request.form.get("texto_formulario") // request.form["texto_formulario"]

En el caso de POST, si queremos subir archivos , como por ej imágenes, en el HTML hay que indicar el
atributo enctype="multipart/form-data":

<form action="/ruta_creada_en_python" method="POST" enctype="multipart/form-data">   


####################  ADMINISTRACION Y SESION DE USUARIO  ##########################################

from flask.globals import session

Creamos la clave de sesion de usuario para administracion:

app.secret_key = "clave_secreta"

Creamos la ruta de administracion (añadimos una variable para guardar posibles errores de login):

@app.route("/admin/")
def inicio_administracion():
    return render_template("admin/login.html", error_login = "")

Se puede crear una ruta "generica" que podemos usar de comodín para indicar las rutas relacionadas
con el proceso de administración web en una única función:

Ej. Función completa de administracion

@app.route("/admin/<string:ruta>", methods=["POST","GET"])
def administracion(ruta):
    if ruta == "login-admin":
        pass_introducido = request.form.get("clave")
        if pass_introducido == "1234" :
             session["identificado"] = "ok"
             listado_anuncios = operaciones_bd_anuncios.obtener_anuncios()
             return render_template("admin/listado-anuncios-admin.html", anuncios = listado_anuncios)
        else:
             return render_template("admin/login.html", error_login = "pass incorrecto")

    if not "identificado" in session :
        return "te has colado, indentificate de nuevo"

    if ruta == "borrar-anuncio":
        id = request.args.get("id")
        operaciones_bd_anuncios.borrar_anuncio(id)
        try:
            #borramos la foto y si no existe, se ejecuta el except que no hace nada
            os.remove("mysite/static/fotos/" + str(id) + ".jpg")
        except:
            pass
        listado_anuncios = operaciones_bd_anuncios.obtener_anuncios()
        return render_template("admin/listado-anuncios-admin.html", anuncios = listado_anuncios)
    if ruta == "editar-anuncio":
        id = request.args.get("id")
        anuncio_a_editar = operaciones_bd_anuncios.obtener_anuncio_por_id(id)
        return render_template("admin/editar-anuncio.html",anuncio = anuncio_a_editar)
    if ruta == "guardar-cambios-anuncio":
        #asi obtengo los datos del formulario, incluido el hidden
        id = request.form.get("id")
        nombre = request.form.get("nombre")
        precio = request.form.get("precio")
        email = request.form.get("email")
        email_valido = request.form.get("email-valido")

        #asi preparo el objeto a mandar a guardar_cambios_anuncio para guardar cambios en la bd
        anuncio_guardar_cambios =  modelo.Anuncio()#forma mas directa: modelo.Anuncio(id=id, nombre = nombre, precio = precio, email = email, email_valido = email_valido)
        anuncio_guardar_cambios.id = id
        anuncio_guardar_cambios.nombre = nombre
        anuncio_guardar_cambios.precio = precio
        anuncio_guardar_cambios.email = email
        anuncio_guardar_cambios.email_valido = email_valido

        #finalmente actualizamos el anuncio en base de datos y volvemos a mostrar listado
        operaciones_bd_anuncios.guardar_cambios_anuncio(anuncio_guardar_cambios)

        #si el usuario subio una nuevo foto, la pisamos con la anterior:
        if "foto" in request.files:
            foto = request.files["foto"]
            foto.save("mysite/static/fotos/" + str(id) + ".jpg")

        listado_anuncios = operaciones_bd_anuncios.obtener_anuncios()
        return render_template("admin/listado-anuncios-admin.html", anuncios = listado_anuncios)

    if ruta == "cerrar-sesion":
        session.clear()
        return render_template("admin/login.html",error_login = "")

###################  IMAGENES  ##################################################

Esta línea en HTML muestra una imagen, y si esta no existe, muestra otra imagen por defecto gracias al evento onerror
de Javascript:

<img src="static/fotos/{{ a[0] }}.jpg" style="height: 200px;" onerror="this.src='static/fotos/sin_imagen.jpg'" />

También se puede mostrar un texto si no existe la imagen:

<img src="static/fotos/{{ a[0] }}.jpg" style="height: 200px;"  alt = "La imagen no existe" />


################## CHAT ( AJAX )  #######################################################

Para crear los ficheros JSON que usa AJAX hay que hacer esta importación:

from flask import jsonify

En la carpeta STATIC debemos incluir el módulo de JQUERY


Ej.  de chat ( requiere crear un tabla en BD para ir guardando los mensajes)

En la parte de PYTHON:

from flask import Flask
from flask.templating import render_template
from flask.globals import request
from operaciones_bd import operaciones_bd_mensajes
from flask import jsonify

app = Flask(__name__)

@app.route("/")
def inicio():
    return render_template("index.html")


#comienzo del servicio rest
@app.route("/registrar-mensaje",methods=["GET","POST"])
def registrar_mensaje():
    nombre = request.args["n"]
    mensaje = request.args["m"]
    operaciones_bd_mensajes.registrar_mensaje(nombre, mensaje)
    return "ok"

@app.route("/obtener-mensajes")
def obtener_mensajes():
    mensajes = operaciones_bd_mensajes.obtener_mensajes()
    return jsonify(mensajes)


Flask.debug = 1
app.run()

En la parte HTML llamamos a JQUERY e incluimos nuestro script de Javascript;

<script type="text/javascript" src="static/jquery.js" ></script>
<script type="text/javascript">

$("#boton_enviar_mensaje").click(function(){
	nombre = $("#nombre").val()
	mensaje =$("#mensaje").val()
	//voy a mandarlo a registrar-mensaje
	$.ajax({ 
		url : "registrar-mensaje" , 
		data : { n : nombre , m : mensaje },
        success: function(res){
        	if ( res != "ok" ){
        		alert("error en envio de mensaje: " + res)
        	}
        }//success
	});//end ajax
});//end click


function refrescar(){
	ahora = new Date();
	$("#info").html(ahora) --> Opcional, para ver el avance de los refrescos

	//para pedir un json (que viene en formato de listas dentro de un array) desde jquery, esta nos da directamente la siguiente funcion
	$.getJSON("obtener-mensajes", function(resultado){
		texto = ""
		for( indice in resultado ){
			texto += resultado[indice][1] + " : " + resultado[indice][2] + "\n";
		}
	    $("#listado_mensajes").html(texto);	
	});
	
}//end refrescar

setInterval(refrescar,1000);  --> En milisegundos, refresca los mensajes cada 1 seg. Lo que se hace realmente es traer los registros
				  posteriores en la BD al id del último mensaje publicado

</script>

######################################  HERENCIA DE PLANTILLAS  #####################################################################3


Podemos crear una plantilla "base" y llamarla en otras plantillas para no repetir el código HTML, lo que necesitemos
personalizar en las nuevas plantillas irá envuelto en un bloque nombrado con una variable


Ej. Esta sería la plantilla base.html en mysite/templates/base ,  se hereda todo pero se deja un "hueco" sin heredar en el bloque
llamado content_1

<html>
    <head>
        <title>Plantilla Base</title>
    </head>
    <body> 
	<h1> HOLA MUNDO </h1> 

	{%block content_1%}
	{%endblock%}

    </body>
</html>

Y en la nueva plantilla llamamos a la platilla base mediante su ruta respecto de templates y añadimos el nuevo HTML en el
hueco que habia quedado en el bloque content_1

{%extends "base/base.htnl"%}

{%block content_1%}
    
    Aqui va el HTML de la nueva plantilla.......

{%endblock%}


##########################################  MACROS  #########################################################################

Si en un proyecto tenemos la necesidad de repetir determinado código X veces,  podemos hacer uso de una macro

Ej.  Creamos el archivo macro.html e incluimos la función mostrar()

{% macro mostrar(valor) %}

	<h1> Se repite este texto con el valor:  {{valor}} </h1>

{% endmacro %]

Y luego donde queramos llamar a la macro, hacemos esto

{% from macro.html import mostrar %}

    {{ mostrar(uno) }}

Esto renderiza "Se repite este texto con el valor : uno " ,  podemos usar las macros incluso dentro de un bloque


##############################  COOKIES  #############################################33

from flask import make_response

Para enviar la cookie al navegador

@app.route("/cookie")
def cookie():
    response = make_response( accion que lleva a cabo la cookie-por ej render_template("anuncio.html")- )
    response.set_cookie("nombre_de_la_cookie", "contenido_de_la_cookie")
    return response

Y para leer la cookie cuando carga nuestra web:

@app.route("/")
def inicio():
    nombre_de_la_cookie = request.cookies.get("nombre_de_la_cookie", "valor_a_devolver_si_la_cookie_no_existe")
    acción a realizar con los valores que traiga la cookie........
