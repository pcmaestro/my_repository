FUNCIONES

Son trozos de código que deben ser invocados para ejecutarse de esta manera :

funcion()

salvo que su ejecución sea diferida , que sean devueltas a su vez como valor de una función
o queramos guardar el valor que devuelva en una variable, en cuyo caso serán invocadas sin parentesis

Se construyen de esta manera :

def funcion(argumentos):
    código...
    return valor 

No es obligatorio que devuelvan un valor,  también pueden simplemente ejecutar una tarea

Si en lugar de la palabra return usamos la palabra yield, creamos un objeto iterable de tipo GENERADOR

DECORADORES

Nota -  la cantidad indeterminada de argumentos *args (valor) y **kwargs ( argumento = valor) sólo se indica si las
	funciones decoradas los requieren

Son funciones que añaden funcionalidades a otras funciones , como resultado devuelven otra función.
Se definen de esta manera :

def funcion_decorador(funcion_parametro):
    def funcion_interna(*args, **Kwargs):
	código funcion_interna....(lo que vamos a añadir a otras funciones)
	funcion_parametro(*args, **Kwargs)
	mas codigo de funcion interna...
    return funcion_interna

Y se invocan asi (la funcion_parametro representa a cualquier función que necesitemos decorar):

@funcion_decorador
def funcion_decorada():
   código funcion_decorada....

Esto ejecutará el código de la función decorada, y además el del decorador


