FUNCIONES

Son trozos de código que deben ser invocados para ejecutarse de esta manera :

funcion()

salvo que su ejecución sea diferida , que sean devueltas a su vez como valor de una función
o queramos guardar el valor que devuelva en una variable, en cuyo caso serán invocadas sin parentesis

Se construyen de esta manera :

def funcion(argumentos):
    código...
    return valor 

No es obligatorio que devuelvan un valor,  también pueden simplemente ejecutar una tarea

Si en lugar de la palabra return usamos la palabra yield, creamos un objeto iterable de tipo GENERADOR

DECORADORES

Nota -  la cantidad indeterminada de argumentos *args (valor) y **kwargs ( argumento = valor) sólo se indica si las
	funciones decoradas los requieren

Son funciones que añaden funcionalidades a otras funciones , como resultado devuelven otra función.
Se definen de esta manera :

def funcion_decorador(funcion_parametro):
    def funcion_interna(*args, **Kwargs):
	código funcion_interna....(lo que vamos a añadir a otras funciones)
	funcion_parametro(*args, **Kwargs)
	mas codigo de funcion interna...
    return funcion_interna

Y se invocan asi (la funcion_parametro representa a cualquier función que necesitemos decorar):

@funcion_decorador
def funcion_decorada():
   código funcion_decorada....

Esto ejecutará el código de la función decorada, y además el del decorador


DECORADORES PREDETERMINADOS (BUILT-IN FUNCTIONS)]

@classmethod --> Indica que el método de la clase no necesita instanciar un objeto para ser llamado , se puede llamar
		 desde la propia clase, que es la que se le pasa como argumento

			Ej.  Mostramos una lista de propiedades ocultas que son propiedades de clase (comunes a todos
			     los objetos que se instancien de esta clase, y que no pueden ser modificadas por ellos)

			class Dinero():
				
				_monedas = ["dolar", "libra", "euro"]
			
			@classmethod
			def mostrar_monedas(clase):
				return clase._monedas (o print(clase._monedas)

			Dinero.monedas() --> devuelve ["dolar", "libra", "euro"]


@staticmethod --> Son métodos de la clase que no usan el self (para herencias, son mejores los classmethod) , basta con
		  llamar a la clase , no es necesario instanciar un objeto
			Ej.
			  class Amigo():
				
				@staticmethod
				def llamar_amigo():
					print("LLamar por tf a un amigo)

			  Amigo.llamar_amigo() --> devuelve "LLamar por tf a un amigo")

@property -->  Aunque en Python no existen las propiedades privadas , por convención se pueden determinar dentro de la
	       clase con un guión bajo delante , si hacemos esto, para poder mostrarlas (getter) , modificarlos (setter)
	       y borrarlos (deletter) hay que usar metodos con decoradores:
		
			Ej.
			class Amigo():

				def __init__(self, nombre):
					self._nombre = nombre

				@property
				def mostrar_nombre(self):
					return self._nombre (o podría ser print(self.nombre))

				@nombre.setter
				def modificar_nombre(self, nombre):
					self._nombre = nombre

				@nombre.deletter
				def borrar_nombre(self, nombre):
					self._nombre = ""
					