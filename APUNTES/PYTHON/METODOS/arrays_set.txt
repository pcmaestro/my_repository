SET

Son conjuntos de elementos únicos no ordenados , sus elementos pueden ser string, números o booleanos, pero no ningún tipo
de array (ni siquera un set)

Para crear un set vacio,  hay que instanciar la clase set() , de lo contrario se crea un diccionario :

Ej  set = set()

Podemos convertir sets en listas y listas en sets,  pero en este último caso, los elementos duplicados son unificados

Añadir y eliminar elementos:

No existe indice, hay que hacerlo por el nombre del elemento:

set.add("elemento")

set.discard("elemento") / set.remove("elemento") --> Si "elemento" no existe, el primero lo ignora y el segundo devuelve KeyError

set.pop() --> Va borrando los elementos una a uno desde el primero, si el set está vacío, devuelve KeyError

Con la función frozenset(set) convertimos el set en inmutable, y entonces ya no se le puede añadir ni borrar nada

Comprobar si un elemento existe en un set:

"elemento" in set --> Devuelve True o False

Borrar todos los elementos:

set.clear()

Comprobar cantidad de elementos:

len(set)

Union de sets :

Se hace con el caracter | ,  si hay elementos duplicados, en el set resultante aparecen unificados

Ej

a = {1,2,3,4,5}
b = {4,5,6,7}

union = a | b  --> devuelve {1,2,3,4,5,6,7}

Intersección de sets:

Se hace con el caractes & , si hay elementos duplicados, en el set resultante aparecen solo los que están en ambos sets

Ej

a = {1,2,3,4,5}
b = {4,5,6,7}

interseccion = a & b  --> devuelve {4,5}

Diferencia de sets:

Se hace con el caracter - y devuelve un nuevo set sólo con los elementos de un set que no están en el otro

Ej

a = {1,2,3,4,5}
b = {4,5,6,7}

diferencia = a - b --> devuelve {1,2,3,6,7}

Subset:

a = {1,2,3,4,5}
b = {4,5}

b.issubset(a) --> Devuelve True o False ( en este caso True)

Sets disconexos :

Son sets que no comparten ningún elemento entre ellos:

a = {1, 2, 3}
b = {4, 5, 6}

a.isdisjoint(b) -- > Devuelve True o False ( en este caso True)




