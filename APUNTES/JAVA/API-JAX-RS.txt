El API de JAX-RS permite trabajar con formatos JSON e incluso XML
	
Los archivos JSON son representaciones de objetos en formato texto de pares
clave:valor,  donde el valor puede ser un Array


Para trabajar con el modelo de objetos de JAX-RS en formatos JSON debenmos
instalar en el proyecto esta dependencia Maven

<dependency>
	<groupId>org.glassfish</groupId>
	<artifactId>javax.json</artifactId>
	<version>1.1.2</version>
</dependency>

Según la funcionalidad, estas son las clases que trae la librería

Instanciar servicios de procesamiento -  Json, JsonBuilder, JsonArrayBuilder

Leer o escribir flujos en JSON - JsonReader, JsonWriter

Representación de objetos JSON = JsonValue, JsonStructure, JsonObject, JsonArray
				 JsonString, JsonNumber

Excepciones de procesamiento JSON - JsonException

Ej creación de objeto JSON

private static JsonObject CrearObjetoJson(){

	JsonObjectBuilder builder = new JsonProviderImpl().createObjectBuilder();

	builder.add("nombre", "Paco")
	       .add("apellido, "Martinez")
               .add("edad":70);

	JsonObject objJson = builder.build();

	return objJson;

}

Ej creación de Array JSON

private static JsonArray CrearArrayJson(){

	JsonArrayBuilder builderArray = new JsonProviderImpl().createArrayBuidler();

	builder.add("lunes")
               .add("martes")
               .add("miercoles")
               .add("jueves")
               .add("viernes")
               .add("sabado")           
               .add("domingo");

	JsonArray arrayJson = builder.build();

	return arrayJson;

}

Si tratara de un array de objetos, estos deben ser JsonObject , con lo cual primero habría que hacer el parseo de
ellos a Json y luego incluirlos en el JsonArray (se puede combinar buider.add() con un bucle for)


Ej Leer archivos JSON

Supongamos que queremos leer el objeto objJson que trae nombre, apellido y edad

private static void leerObjetoJson(){

	String archivo = "home/user/archivo.json";
	
	try ( JsonReader lectorJson = JsonProviderImpl().createReader(new FileReader(archivo)) ){
	   
		JsonObject productoJson = lectorJson.readObject();
		String nombre = productoJson.getString("nombre");
		double precio = productoJson.getJsonNumber("precio");

	}catch FileNotFoundException e{

	    e.printStackTrace();

	}

}

TRABAJAR CON XML

Para que JAX-RS puede trabajar con XML, en la clase cuyo contenido necesitemos representar en formato
XML, es necesario indicar la anotación @XmlRootElement


CLIENTE USANDO EL API JAX-RS

Pasos:

-Instanciar un objeto de la clase Client (Client cliente) --> Objeto muy pesado, no abusar de su instanciación
-Configurar el cliente con un destino (cliente.target)
-Crear una petición basada en el destino (request())
-invocar la petición (get, put, update, delete)
-Cerrar cliente --> Cerrar sólo cuando se hayan hecho todas las llamadas, abrir y cerrar es muy costoso en recursos

En este ejemplo usamos el método GET y el producto será una instancia de la clase String,  añadimos el parámetro "clave" a la URI
añadiendo el método queryParam()

try{
    Client cliente = ClientBuilder.newClient();
    
    String producto = cliente.target(http://ruta_servicio_rest).queryParam("clave", valor).request(MediaType.APPLICATION_JSON).get(String.class);

    cliente.close();

}catch (Exception e){
    e.printStackTrace();
    
    
    