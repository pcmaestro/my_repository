package com;

import java.awt.List;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.PathParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import daos.CocheDAO;
import daos.MasterDAO;
import daosimpl.CocheDAOimpl;
import model.Coche;

@Path("hola")
public class Recursos {
	
	
	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String metodo() {
		String var = "Hola Mundo";
		
		return var;
	}
	
	@Path("json")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public ArrayList<Coche> listarCochesJson() {		
		
		CocheDAO coche = new CocheDAOimpl();
		
		ArrayList<Coche> coches = coche.obtenerCoches();
		
		return coches;
		
	}
	@GET
	@Path("xml")
	@Produces(MediaType.APPLICATION_XML)
	public String listarCochesXml() throws JsonProcessingException {		
		CocheDAO coche = new CocheDAOimpl();		
		ArrayList<Coche> coches = coche.obtenerCoches();		
		XmlMapper xmlMapper = new XmlMapper();
		String xml = xmlMapper.writeValueAsString(coches);
		
		return xml;
	}
	
	@GET
	@Path("json-coche")
	@Produces(MediaType.APPLICATION_JSON)
	public Response obtenerCocheJson(@QueryParam("id") String id) {

		Coche coche = new Coche();
		
		Map<Integer, String> error = new HashMap<Integer, String>();
		error.put(404, "not found");
		
		int nid;
		
		if (id.contentEquals("")) {
			nid = 0;
			
		}else {
						
			nid = Integer.parseInt(id);
		}//end if
		
		
		CocheDAO c = new CocheDAOimpl();
		
		coche = c.obtenerCochePorId(nid);
			
		if(coche.getId() != 0) {
			
			return Response.ok(coche).build();	
	
		}else {
			
			return Response.serverError().type(MediaType.APPLICATION_JSON).entity(error).build();
		}		

	}//end obtenerCocheJson
	
	@GET
	@Path("json/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response obtenerCocheJson2(@PathParam("id") int id) {
		
		System.out.println("El id elegido es " + id);
		
		Coche coche = new Coche();
		
		Map<Integer, String> error = new HashMap<Integer, String>();
		error.put(404, "not found");

		
		CocheDAO c = new CocheDAOimpl();
		
		coche = c.obtenerCochePorId(id);
		
		System.out.println(coche.toString());
			
		if(coche.getId() != 0) {
			
			return Response.ok(coche).build();	
	
		}else {
			
			return Response.serverError().type(MediaType.APPLICATION_JSON).entity(error).build();
		}		

	}//end obtenerCocheJson
	
	@DELETE
	@Path("borrar-coche/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response borrarCoche(@PathParam("id") int id) {
		
		CocheDAO c = new CocheDAOimpl();
		
		c.borrarCoche(id);
		
		return Response.noContent().build();
		
	}//end borrarCoche
	
	@POST
	@Path("registrar-coche")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response registrarCoche(Coche coche) throws URISyntaxException {
		
		CocheDAO c = new CocheDAOimpl();		
		
		return Response.ok(coche).build();
	}
	
}//end class
	