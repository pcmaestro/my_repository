OBJETO xmlHttpRequest

Se trata del componente fundamental de una aplicación AJAX. A través de sus propiedades y métodos es
posible lanzar peticiones en modo asíncrono al servidor y acceder a la cadena de texto enviada en la
respuesta.

Primer hay que instanciar el objeto:

var variable = new XMLHttpRequest();

Los métodos habituales para interactuar con el servidor son GET y POST



Invocación del recurso en el servidor (método open) :

variable.open("GET", http//urlAccesoRecurso + posibleVariable, true, user, password) -->  ( Método, URL,  modo asíncrono - true o false -, usuario, contraseña)

Podemos establecer cabeceras en las peticiones :

setRequestHeader();



Procesamiento de la respuesta del servidor ( propiedad onreadystatechange), aqui informamos de la función que procesará dicha respuesta.
La función va sin parentesis (si se ponen, la función se ejecuta y guarda el resultado)

variable.onreadystatechange = procesarRespuesta;


Desde que se crea el objeto xmlHttpRequest, hasta que se recibe la respuesta por completo,  hay 4 cambios de estado que se recogen en la
propiedad readyState , que tienen estos valores : 

0 El objeto XMLHpRequest se ha creado pero aún no se ha configurado la petición.
1 La petición se ha configurado pero aún no se ha enviado.
2 La petición se acaba de enviar, aunque aún no se ha recibido respuesta.
3 Se ha recibido la cabecera de la respuesta pero no el cuerpo
4 Se ha recibido el cuerpo de la respuesta. Es el momento en que esta puede procesarse.

Y también estos status :

200: "OK"
403: "Forbidden"
404: "Page not found"

El típico error 404 proviene del código de error que aparece en la línea de status del header HTML , 404, que signfica not found o no encontrado. 
En general los códigos 200 indican respuestas correctas, los códigos 300 indican redirecciones, los códigos 400 problemas con la petición 
y los códigos 500 problemas del servidor.

Ejemplo de uso :


//Creamos la función que modifica nuestra web
function loadDoc() {
  //Instanciamos el objeto XMLHttpRequest
  var xhttp = new XMLHttpRequest();
  //Ahora creamos dentro de nuestra función otra para supervisar los estado de la propiedad readyState
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("id").innerHTML =
      this.responseText;
    }
  };
  //Abrimos la conexión con el servidor con el método GET, si hace falta user + pass , lo indicamos
  xhttp.open("GET", "ajax_info.txt", true);
  //Enviamos la petición al servidor
  xhttp.send();
}

OTRO EJEMPLO

En este ejemplo traeremos la información de un fichero JSON ( notación javascript de objetos y Arrays)
Usamos el método JSON.parse() para decirle al navegador que tiene que leer un JSON


var ourRequest = new XMLHttpRequest();

ourRequest.open("GET" , "https://learnwebcode.github.io/json-example/animals-1.json", true);

ourRequest.onload = function show(){
	var ourData = JSON.parse(ourRequest.responseText);
	console.log(ourData[2]); //Aqui traemos el objeto en el index 2 del Array contenido en el JSON

};
ourRequest.send();


####################### USANDO JQUERY  ############################################################

Debemos importar el archivo de JQUERY e instalarlo en un directoria del proyecto, luego lo invocamos en el HTML
y escribimos nuestro Javascript haciendo uso de sus funciones:

https://jquery.com/download/ --> Hacemos copy paste directamente del texto por ejemplo en un archivo llamado
				 jquery.js

O podemos llamar directamente al Google API de Ajax:

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

O podemos llamar al CDN de Jquery cargando la URL minified según la última versión publicada (recomendado)


Los scripts de llamada y los derivados de JQuery o Javascript puro,  irán luego dentro de un <script> al final del <body>

Lo común es que esté primero al final del body el script de llamada al API o el CDN , y luego otro script con el código o
con la llamada src a otro archivo a parte donde esté el código JQuery y Javascript

Si en Visual Studio Code instalamos la libreria Jquery Code Snippets, nos permite cargar las distintas funciones Jquery
simplemente tecleando jq


Todo el código JQuery de nuestro proyecto deberá estar envuelto por esta funcion:

$(document).ready(function(){

    código JQuery.............

});

Ej .  Este código oculta un párrafo al hacer click sobre él:

$(document).ready(function(){
  $("p").click(function(){
    $(this).hide();
  });
});

Para tomar un elemento en el DOM ,  el formato es $("#id"), $(".class"), $("h1")...etc

Para leer el contenido de una caja de texto o un textarea :  $("#id").val()

Para insertar texto :  $("#id").html(texto_a_insertar)

Para escuchar eventos : $("#id").click(function(){...})

Para escuchar multiples eventos a la vez: $("#id").bind({click:function(){...}, mouseenter:function(){...}, etc...})

Para mostrar y ocultar elementos : $("#id").show()  // $("#id").hide() // $("#id").toggle() --> En los parentesis podemos añadir los milisegundos
												que dura el efecto de mostrar u ocultar para que 
												se ejecuten lentamente

También se pueden mostrar y ocultar elementos con .fadeIn(), .fadeOut(), .fadeToggle() igualmente pasandoles como parámetros los milisegundos de
duración del efectoG

Para aplicar CSS : $("#id").css("atributo", "valor") --> Ej ("background-color", "blue")

Para aplicar varios atributos CSS: $("#id").css( {color: "blue" , background: "green", font-weight: "bold"} )

Para aplicar selectores descendentes : $("div h1") --> Todos los h1 dentro de un div

Para aplicar pseudoselectores : $("div h1:first") --> El primer h1 dentro de un div

Para añadir elementos al DOM : $("#id").append("<h1>Nuevo texto a mostrar</h1>) --> Dentro del elemento con cierta id, añade un h1

Para añadir elementos al DOM : $("#div_id").prepend("<h1>Nuevo texto a mostrar</h1>) --> dentro del elemento div "div_id" añade justo al principio del contenido un h1

Para eliminar elementos del DOM : $("#id").remove() --> Elimina el elemento con cierto id

Para añadir/quitar una clase : $("div").addClass("class") / $("div").removeClass("class") / $("div").toggleClass("class")  --> Añade o quita una clase CSS a un elemento

Para establecer atributos de un elemento : $("img").attr("src", "home/pictures/25.jpg") // $("img").attr("height", "150")

Para usar expresiones regulares : $("#id").attr("value").match("Aquí la expresión regular");

Para enviar formularios : $("#id_form").submit(function(e){
				e.preventDefault()
				var input_usuario = $("id_caja_texto").val

			})



Para cargar datos de un servidor o HTML en un elemento del DOM : $(tipo_selector).load(ruta/url , opcional_data - formato clave:valor -, opcional_callback - funcion_a_ejecutar_tras_cargtar_url)

Para hacer refrescos automáticos de contenidos en la página :  setInterval(nombre_funcion_sin_parentesis, intervalo_refresco_milisegundos)

Para hacer animaciones --> Ver documentación de animate()

Para enviar la información a través de AJAX :  

<script type="text/javascript" src="static/jquery.js" ></script>

<script>

$.ajax{	
    url: "ruta-web-python",
    data: {clave1:valor1, clave2:valor2, clave3:valor3.......},  --> También se puede pasar automaticamente a JSON con $("id_form").serialize()
    success : function(resultado){
			   if(resultado != "ok"){
					código a ejecutar......
					}//end success

}//end ajax

Para recibir información a través de AJAX:

$.getJSON("ruta-web-python", funcion_a_ejecutar)

</script>

Ej. Envio de formulario por Ajax usando el método general pintando un spin de espera de carga en un div con "id_cargando" junto al boton submit 
    en lo que se envia la información

$(document).ready(function(){

	$("id_form").submit(function(e){
		
		e.preventDefault();
		
		var peticion = $("id_form").attr("action"); --> Almacenamos en la variable la ruta-python
		
		var metodo = $("id_form").attr("method"); --> Almacenamos en la variable el método del formulario

		$.ajax({
			beforeSend: function(){
				$("id_cargando").spin({radius:3, width:2, heigh:2, length:4})
			},
			url : peticion,
			type : metodo,
			data : $("id_form).serialize(), --> Pasa la información de todo el <form> a JSON, también podemos incluir un diccionario a mano
			success : function(response){
				#response = return que devuelva la función del servidor, podria ser por ejemplo OK
				if(response == OK)
					código a ejecutar en caso de operacion correcta con el servidor........
				},
			error : function(jqXHR, status, error){
				#jqXHR --> Es el objeto XMLhttpRequest
				#status --> Puede tener los valores timeout, error, abort, parsererror
				#error --> Puede devolver Not Found,  http error, internal server error, etc...
				código a ejecutar en caso de operacion incorrecta con el servidor......
				},
			complete : function(jqXHR, status){
				#status --> Puede tener los valores success, notmodified, timeout, error, abort, parsererror	
				código a ejecutar en caso de operación completada con éxito......
				},
			timeout: tiempo_espera_milisegundos  --> Si se alcanza, lo devuelve en el status de error

			});		
		
		});

});

Ej -  Traer información con Ajax usando el método GET

$(document).ready(function(){

	var diccionario = {clave1:valor1, clave2:valor2, etc...} --> Parametros que necesitemos añadir
								     a lo que venga en data
	
	$.get("ruta/url", opcional_diccionario, function(data){
		#data --> datos que traemos de la ruta/url
		código a ejecutar con el contenido del data....
		
	});

});

Ej- Enviar información con Ajax usando el método POST

$(document).ready(function(){
	
	var peticion = $("id_form").attr("action");

	$("id_form").submit(function(e){
		
		e.preventDefault();
		
		var info = $("id_form").serialize(); --> Lee y pasa a JSON la información de los formularios
		
		$.post(peticion, info).error(function(response){...}).success(function(response){...}); --> Para ejecutar funciones
													    callback según el return de
													    la función del servidor sea 
													    OK o error

	});
	
});

Las funciones error y success traen estos argumentos en este orden : response, status, jqXHR .  como mínimo vamos a necesitar siempre el
response ( return de la función python del servidor)

Ej- Traer información en Ajax usando el método getJSON ( la información vendrá en formato JSON)

$(document).ready(function(){
	
	$.getJSON("ruta/url", function(json_response){
		
		$.each(json_response, function(clave, valor){
		
			$("id").html("El " + clave + " es = " + valor)
		});
	
	});
	
});

Aqui recorremos el JSON obtenido con el método each(), que es un bucle FOR


Si se necesita importar un script de Javascript o de la web de Jquery, ver documentación del método getScript()