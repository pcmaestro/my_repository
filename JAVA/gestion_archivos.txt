RUTAS

import java.io.File;

Para usar esta clase, hay que instanciar un objeto y especificar el nombre del
archivo o directorio

File myObj = new File("filename.txt");


Metodos de la clase File:

Method			Type		Description
canRead()		Boolean		Tests whether the file is readable or not
canWrite()		Boolean		Tests whether the file is writable or not
createNewFile()		Boolean		Creates an empty file
delete()		Boolean		Deletes a file
exists()		Boolean		Tests whether the file exists
getName()		String		Returns the name of the file
getAbsolutePath()	String		Returns the absolute pathname of the file
length()		Long		Returns the size of the file in bytes
list()			String[]	Returns an array of the files in the directory
mkdir()			Boolean		Creates a directory

CREAR ARCHIVOS

Para crear un archivo usaremos el método createNewFile(), este metodo devuelve true si el
archivo es creado correctamente y false su el archivo ya existe

Este método debe ser envuelto SIEMPRE en un try-catch , ya que arroja la excepcion IOException
si el archivo no puede ser creado por cualquier razón

import java.io.File;  // Import the File class
import java.io.IOException;  // Import the IOException class to handle errors

public class CreateFile {
  public static void main(String[] args) {
    try {
      File myObj = new File("filename.txt");
      if (myObj.createNewFile()) {
        System.out.println("File created: " + myObj.getName());
      } else {
        System.out.println("File already exists.");
      }
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }
}

Para crear un archivo en una ruta determinada, la indicamos como parámetro al instanciar
el objeto de la clase File, con la especialidad de que si trabajamos en windows, las 
contrabarras hay que escaparlas con un backslash:

File myObj = new File("C:\\Users\\MyName\\filename.txt");

Si trabajamos en Mac o en Linux las rutas se construyen con / y no es necesario el escape

ESCRIBIR ARCHIVOS

Aqui usaremos la clase FileWriter y su método write() , este método escribe y crea archivos

Cuando hayamos terminado de escribir ,  tendremos que cerrar el fichero con el método close()

import java.io.FileWriter;   // Import the FileWriter class
import java.io.IOException;  // Import the IOException class to handle errors

public class WriteToFile {
  public static void main(String[] args) {
    try {
      FileWriter myWriter = new FileWriter("filename.txt");
      myWriter.write("Files in Java might be tricky, but it is fun enough!");
      myWriter.close();
      System.out.println("Successfully wrote to the file.");
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }
}

Con FileWriter("archivo.txt", true) agrega texto sin pisar lo anterior

Las clases BufferedReader() y BufferdWriter() leen y escriben en una memoria intermedia , pero no escriben
realmente en el archivo hasta que llega al close() o se llena la memoria, es recomendable usarlas siempre, 
ya que el proceso de lectura y escritura directamente en disco duro puede resultar muy costosoG


LEER ARCHIVOS

FileReader()

El método read() de esta clase lee letra a letra y devuelte un número entero con su
identificador ASCII , con lo cual hay que hacer casting hacia char de cada letra

Tenemos la opción de usar la clase BufferedReader() + método readline() que
va almacenando lineas completas antes de leer los caracteres


	try {
				FileReader fr = new FileReader(archivo);
				BufferedReader br = new BufferedReader(fr);
				String linea = "";
				while ( (linea=br.readLine()) != null ) {
					System.out.println(linea);
				}
				br.close();
				fr.close();			
			} catch (FileNotFoundException e) {
				System.out.println("no puedo leer del archivo");
			} catch (IOException e) {
				System.out.println("error al leer");
			}



Otra clase que podemos usar es Scanner(),  que también almacena lee linea a linea

import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to read text files

public class ReadFile {
  public static void main(String[] args) {
    try {
      File myObj = new File("filename.txt");
      Scanner myReader = new Scanner(myObj);
      while (myReader.hasNextLine()) {
        String data = myReader.nextLine();
        System.out.println(data);
      }
      myReader.close();
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }
}

BORRAR UN ARCHIVO

Para borrar un archivo usaremos el método delete()

import java.io.File;  // Import the File class

public class DeleteFile {
  public static void main(String[] args) { 
    File myObj = new File("filename.txt"); 
	    if (myObj.delete()) { 
      System.out.println("Deleted the file: " + myObj.getName());
    } else {
      System.out.println("Failed to delete the file.");
    } 
  } 
}

BORRAR UNA CARPETA

Para borrar una carpeta es necesario que esté vacía

import java.io.File; 

public class DeleteFolder {
  public static void main(String[] args) { 
    File myObj = new File("C:\\Users\\MyName\\Test"); 
    if (myObj.delete()) { 
      System.out.println("Deleted the folder: " + myObj.getName());
    } else {
      System.out.println("Failed to delete the folder.");
    } 
  } 
}

CONSEGUIR OTRAS INFORMACIONES

La clas File disponer de varios métodos para conseguir información de los archivos

import java.io.File;  // Import the File class

public class GetFileInfo { 
  public static void main(String[] args) {
    File myObj = new File("filename.txt");
    if (myObj.exists()) {
      System.out.println("File name: " + myObj.getName());
      System.out.println("Absolute path: " + myObj.getAbsolutePath());
      System.out.println("Writeable: " + myObj.canWrite());
      System.out.println("Readable " + myObj.canRead());
      System.out.println("File size in bytes " + myObj.length());
    } else {
      System.out.println("The file does not exist.");
    }
  }
}

OTRAS CLASES

Hay muchas clases disponibles en el API de Java para manejar archivos :

FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, 
BufferedWriter, FileOutputStream, etc...

Cual de ellas usar, depende de la versión de Java y de si necesitamos leer archivos
con tipos byte o character, de si necesitamos conocer el tamaño archivo o una linea, etc...



ARCHIVOS BINARIOS ( todos los que no sean texto plano)

Se usan las clases FileInputStream y FileOutputStream , también las clases BufferdInputStream y
BufferedOutputStream para guardar datos en memoria intermedia antes de hacerlo en el disco duro

Ej.

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;

public class CopiaFicheros {

	public static void main(String[] args) {
		copia ("c:/ficheroOrigen.bin", "c:/ficheroDestino.bin");
	}

	public static void copia (String ficheroOriginal, String ficheroCopia)
	{
		try
		{
                        // Se abre el fichero original para lectura
			FileInputStream fileInput = new FileInputStream(ficheroOriginal);
			BufferedInputStream bufferedInput = new BufferedInputStream(fileInput);
			
			// Se abre el fichero donde se hará la copia
			FileOutputStream fileOutput = new FileOutputStream (ficheroCopia);
			BufferedOutputStream bufferedOutput = new BufferedOutputStream(fileOutput);
			
			// Bucle para leer de un fichero y escribir en el otro.
			byte [] array = new byte[1000];
			int leidos = bufferedInput.read(array);
			while (leidos > 0)
			{
				bufferedOutput.write(array,0,leidos);
				leidos=bufferedInput.read(array);
			}

			// Cierre de los ficheros
			bufferedInput.close();
			bufferedOutput.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}



OBJETOS

Se usan las clases ObjectInputStream y ObjectOutputStream, y los métodos readObject() y writeObject()

Debemos cerrar siempre el objeto con el método close()

Primero debemos instanciar un objeto de las clases FileInputStream/FileOutputStream, y luego pasarselo
como argumento a ObjectInputStream/ObjectOutputStream


SERIALIZACION (intefaz Serializable)

Cuando queremos guardar un objeto en un archivo,  Java por detrás ejecuta un proceso llamado serialización,
lo cual es transformar una información en una cadena de bits, o sea,  guarda el objeto en el archivo como
una cadena binaria , pero para que ejecute dicho proceso estamos obligados a implementar en la clase de dicho
objeto el interfaz Serializable.  Este interfaz es de marcado, con lo cual no crea ningún método adicional,
pero indica a Java que si le pedimos guardar en un archivo un objeto de esa clase, primero debe serializarlo
