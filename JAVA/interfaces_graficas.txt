####################################   SWING   ################################################################

Swing es una librería que contiene widgets para interfaces gráficas

La estructura de una aplicación gráfica es un objeto de la clase JFrame en el cual se incluye como mínimo
un objeto de la clase JPanel,  y este último contiene los objetos que se muestran al usuario en pantalla

Lo normal es , en el Main,  crear una clase que hereda de JFrame donde instanciamos un objeto que usará
los métodos de JFrame para aplicar tamaño, ubicación, contenido (panel),visibilidad de la ventana, fin de la ventana,
etc....

Ej.

package cursojava10ejercicioDiferencias;

import javax.swing.JFrame;

public class Main {

	public static void main(String[] args) {
		
		JFrame ventana = new JFrame("Haz click en la diferencia de la derecha");
		ventana.setSize(800, 400);
		ventana.setLocation(100,100);
		ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ventana.setContentPane(new MiPanel(ventana));
		ventana.setVisible(true);
	}

}

Y luego crear otra clase que hereda de JPanel, y si es necesario, implementa interfaces de gestión de eventos 
(ratón, teclado..), esta última clase dispondrá de un constructor de objetos donde añadiremos los elementos,
imágenes y "Listeners" de eventos , dicho constructor deberá pedir como argumento el objeto "JFrame ventana"

public class MiPanel extends JPanel implements ActionListener{
	
	public MiPanel(JFrame ventana){
	....
	}
}

Si necesitamos mostrar imágenes o dibujos Java,  además debemos sobreescribir el método paint(Graphics g) de
la clase JPanel (Graphics es otra clase que va a requerir un import), mediante el método drawImage() indicaremos
el tamaño y ubicación de la imagen en el panel

Ej.

public void paint(Graphics g) {

	g.drawImage(primeraImagen, 0,0, 800, 400, this); --> Ver más abajo IMAGENES
}



Ej de aplicación gráfica

//Clases de la interfaz gráfica
import javax.swing.JButton; --> Crea botones
import javax.swing.JFrame; --> Crea la ventana
import javax.swing.JLabel; --> Crea etiquetas
import javax.swing.JOptionPane; --> Ventanas de dialogo tipo alert
import javax.swing.JPanel; --> Crea los paneles que contienen los componentes de la ventana (necesario al menos un panel)
import javax.swing.JTextField; --> Caja tipo input_text, recibe como parámetro el ancho en nº de caracteres

//Interfaces de eventos
import java.awt.event.ActionEvent; --> Añade eventos
import java.awt.event.ActionListener; --> Escucha los eventos en los botones

//Clases para redondear números decimales
import java.math.BigDecimal;
import java.math.RoundingMode;

public class VentanaPrincipal extends JFrame implements ActionListener{
		
	//Se definen aqui las varialbles que vayan a usar más de un método
	JTextField entradaEuros = new JTextField(10);

	JButton botonDolares = new JButton("Convertir a dolares");			
	
	JButton botonLibras = new JButton("Convertir a libras");	
	
	JButton botonPesos = new JButton("Convertir a pesos");
	
	
		public VentanaPrincipal(){
			System.out.println("se ejecuta el constructor");			
			this.PrepararVentana();
		} //end constructor

		
		void PrepararVentana() {
			//this representa al objeto instanciado en esta clase	
			//Componentes de la ventana
			JLabel labelTexto = new JLabel();
			labelTexto.setText("intrude la cantidad de euros");			

			//Como mínimo hace falta un panel donde meter los componentes
			JPanel panel = new JPanel();
			panel.add(labelTexto);
			panel.add(entradaEuros);
			panel.add(botonDolares);
			panel.add(botonLibras);
			panel.add(botonPesos);
			
			this.setContentPane(panel);
			this.setSize(400, 400);
			this.setVisible(true);
			this.setLocation(100, 100);
			this.setDefaultCloseOperation(3);
			
			botonDolares.addActionListener(this);
			botonLibras.addActionListener(this);
			botonPesos.addActionListener(this);
			
		} //end prepararVentana

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("boton pulsado");						
			
			String introducido = entradaEuros.getText().replace(",", ".");
			double introducidoDouble = Double.parseDouble(introducido);

			//El método getSource() guarda el elemento que produce el evento
			if(e.getSource() == botonDolares ) {
				double moneda = introducidoDouble * 1.13;
				//Redondeamos los decimales a 2 digitos
				BigDecimal moneda2d = new BigDecimal(moneda);
				moneda2d = moneda2d.setScale(2, RoundingMode.HALF_UP);
				String resultado = moneda2d.toString().replace(".", ",");
				JOptionPane.showMessageDialog(this, "dolares : " + resultado);
			}else if(e.getSource() == botonLibras) {
				double moneda = introducidoDouble * 0.91;			
				BigDecimal moneda2d = new BigDecimal(moneda);
				moneda2d = moneda2d.setScale(2, RoundingMode.HALF_UP);
				String resultado = moneda2d.toString().replace(".", ",");
				JOptionPane.showMessageDialog(this, "libras : " + resultado);
			}else if(e.getSource() == botonPesos) {
				double moneda = introducidoDouble * 25.21;			
				BigDecimal moneda2d = new BigDecimal(moneda);
				moneda2d = moneda2d.setScale(2, RoundingMode.HALF_UP);
				String resultado = moneda2d.toString().replace(".", ",");
				JOptionPane.showMessageDialog(this, "pesos : " + resultado);
			} //end if
		} //end actionPerformed
} //end class VentanaPrincipal

FONDO

El color de fondo del JPanel debemos incluirlo en el constructor con el método

this.setBackground(Color.NOMBRE_COLOR); --> también admite el color con new Color(r,g,b)


IMAGENES

Para mostrar una imagen en la clase JPanel, es necesario guardarla en una variable de la subclase Image:

Ej .  private Image var_imagen = null;

Y luego indicar su ruta y leerla con la clase ImageIO.read(var_imagen) dentro de un constructor:

	public Panel() {
		File imagen1 = new File("C:\\ruta\\imagen.jpg);

		try {
			var_imagen = ImageIO.read(imagen1);
		
		} catch (IOException e) {			
			System.out.println("No se localiza la imagen");
		}

Por última hay que "pintar" el tamaño y ubicación de la imagen en el JPanel con el método paint + la clase Graphics:

Ej.  

	public void paint(Graphics g) {
		g.drawImage(var_imagen, 0, 0, 450, 350, this);--> Coordenadas ubicación, coordenadas tamaño, observer
		

	}

La clase Graphics tiene métodos para dibujar figuras, como por ej fillOval(), fillRect()... , o colorearlas, ej setColor()



REFRESCO DE VENTANAS

Puede surgir la necesidad de modificar el contenido de la ventana ( cambiar un panel por otro ) , para que
esto funcione correctamente es necesario usar un método de refresco de la ventana

SwingUtilities.updateComponentTreeUI(this.ventana);

O también le método repaint()

Si no usamos estos métodos, en la ventana no serán visibles las modificaciones


INTERFAZ MOUSELISTENER

La interfaz MouseListener implementa una serie de métodos para "escuchar" eventos del ratón

La diferencia entre MousePressed y MouseClicked radica en que la primera ejecuta el evento al pulsar
el botón del ratón y la segunda al pulsarlo y después soltarlo

Si queremos escuchar los eventos en algún objeto del JPanel,  lo haremos añadiendo el método addMouseListener()
en el constructor

Ej .  this.addMouseListener(this);

INTERFAZ ACTIONLISTENER

Maneja estos eventos:

al pulsar un botón.
al hacer doble clic en un elemento de lista.
al pulsar INTRO en una caja de texto.
al elegir un menú.

Sólo implementa el método actionPerformed(ActionEvent e) , en el constructor se escuchan los eventos con 
this.addActionListener(this);

INTERFAZ KEYLISTENER

Esta interfaz escucha los eventos en el teclado, implementa estos métodos:

public void keyPressed(KeyEvent e){
}

Este método se ejecuta cada vez que presionas una tecla.


public void keyReleased(KeyEvent e){
}

Este método se ejecuta cada vez que sueltas una tecla.

public void keyTyped(KeyEvent e){
}

Este método se ejecuta cada vez que se presiona y se suelta una tecla

Esta interfaz numera las teclas con contantes que las relacionan con números enteros

En el constructor los eventos se escuchan con this.addKeyListener(this) , pero antes es necesario
conceder foco al panel con el método this.setFocusable(true);

COMPONENTES

Exsite una amplia lista de componentes de SWING en la web (botones, checkbox, scroll, menú, etc...)

https://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html



#######################   WINDOWBUILDER  ########################################################

WindowBuilder es un plug-in GUI de Eclipse Marketplace que se usa para construir interfaces gráficas
mediante la herramienta Swing Designer

Estructura básica de un proyecto:

	Paquete main
		Main class --> Se incluye la instancia new GestorVentanas();
	
	Paquete modelo
		Producto1 class --> Constructor, método toString() , getters + setters
		Producto2 class
		etc..

	Paquete vista
		VentanaPrincipal class --> Creada con WindowBuilder, hereda de JFrame y contiene los menús (Exponer menús)
		Panel1 class --> Creada con WindowBuilder, hereda de JPanel (Exponer Widgets)
		Panel2 class
		etc...

	Paquete daos
		Producto1DAO interface --> Contiene los métodos CRUD (No programar CRUD en las vistas !!!)
		Producto2DAO interface
		etc...
		Producto1DAOimpl class --> Implementa los métodos del interfaz para hacer el CRUD
		Producto2DAOimpl class
		etc...

	Paquete gestorVentanas
		GestorVentanas class implements ActionListener --> Contiene un objeto de la claseDAOimpl (CRUD),
								   objetos de VentanaPrincipal y los paneles,
								   Un constructor con los controles de los widgets
								   y los listener de eventos,
								   un método actionPerformed(ActionEvent e) del
								   interfaz ActionListener para ejecución de código
								   ante los eventos e ir cambiando setContentPane(Panel)
								   en función de lo que se vaya eligiendo en los menús,
								   los cambios de panel sólo son efectivos tras un
								   refresco de pantalla



Las variables de los componentes incluidos en los menús y los paneles son private,  para poder acceder
a ellos debemos usar métodos Getter , para lo cual hay que clickar sobre ellos con botón derecho y 
seleccionar Expose,  lo cual nos crea dicho método en la clase del objeto seleccionado


BARRAS DE MENU

Se componen de JMenuBar + JMenu + JMenuItem, se incluyen en el JFrame (o clase que hereda de él)



CONSTRUCTOR DEL GESTOR DE VENTANAS - 

Ej

public GestorVentanas() {
		
		//Añadimos los Listener de los menús mediante su Getter
		ventanaPrincipal.getMenuRegistrarLibro().addActionListener(this);
		ventanaPrincipal.getMenuListarLibros().addActionListener(this);
		
		//Añadimos los Listener de los botones mediante su Getter
		panelInsertarLibro.getBotonRegistrarLibro().addActionListener(this);
		
		//Primer panel a mostrar al cargar la ventana
		ventanaPrincipal.setContentPane(panelInsertarLibro);
		
		//Hacemos visible la ventana
		ventanaPrincipal.setVisible(true);
	}


REFRESCO DE PANTALLA

SwingUtilities.updateComponentTreeUI(ventanaPrincipal);


EJECUCION DE ACCIONES ANTE LOS EVENTOS

En la clase Gestora de Ventanas implementamos el interfaz ActionListener, el cual
crea el método actionPerformed(ActionEvent e)

Podemos capturar los eventos con el método e.getSource() y guardarlos en una instancia
de la clase Object

Object elementoPulsado = e.getSource();

Luego, mediante una estructura de IF podemos ir indicando el código a ejecutar ante
cada evento capturado , accedemos a los elementos por sus Getter

if (elementoSeleccionado == ventanaPrincipal.getMenuRegistrarLibro()) {
	ventanaPrincipal.setContentPane(panelInsertarLibro);
}else if(elementoPulsado == ventanaPrincipal.getMenuListarLibros()) {
	ventanaPrincipal.setContentPane(panelListarLibros);


CONTROLES DE LOS WIDGETS

Las clases donde codifiquemos los controles de los widgets deben implementar el interfaz ActionListener para
gestionar los eventos sobre ellos

Los "Listeners" deben incluirse en el constructor de la clase GestorVentanas, la cual a su vez debe ser instanciada
en el método main para arrancar nuestra interfaz gráfica

En los métodos de los interfaces de eventos,  el objeto evento dispone del método e.getSource() para ver que objeto
ha provocado dicho evento

Están muy bien explicados en la web GeeksForGeeks.org


***Etiquetas***

JLabel("etiqueta) class


***Caja de Texto***

JTextField class
métodos usuales :  getText() , setText(), addActionListener(this)


***Text Area***

JTextArea(int cols, int rows) class
métodos usuales:  getText(), addActionListener(this)


***Radio Buttons***

JRadioButton("etiqueta") class + ButtonGroup class
métodos usuales:  buttongroup.add(radiobutton) ,  radiobutton.setSelected(), radiobutton.isSelected(), 
radiobutton.getText(), radiobutton.addActionListener(this)


***Check Boxes***

JCheckBox("etiqueta") class
métodos usuales: setSelected(), isSelected(), getText(), addActionListener(this)


***Combo box***

JComboBox(Array[] nombre_array) class
métodos usuales: addItem(), getItemAt(int nºindice),getSelectedIndex(int nº indice), setSelectedIndex(int nºindice) ,
addActionListener(this)
Podemos añadir elementos desde un Array usando un bucle for + addItem()

***Select / Select Multiple (Listas)***

JList(Array[] nombre_array) class
métodos usuales: getSelectedIndex(), setSelectedIndex(int nºindice), isSelectedIndex(int nºindice), 
setSelectionMode(ListSelectionModel.SINGLE_SELECTION), setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION),
addListSelectionListener(ListSelectionListener elemento)

Los datos de una lista se añaden desde un modelo , es conveniente sobreescribir el método toString de la clase que usamos
para crear los datos

Ej

ArrayList<Coche> coches = cochesDAO.listarCoches();
		DefaultListModel<String> listModel = new DefaultListModel<String>();

		for (Coche c : coches) {
			listModel.addElement(c.toString());
		} // end for

		panelListado.getList().setModel(listModel);

***Tablas***

JTable class 

En Swing Designer podemos hacer click botón derecho sobre el JTable y hacer un surround with JScrollPane para usar un
scroll en la tabla

JTable tiene varios constructores , el más util es el que pide un Array con los nombres de columnas y otro Array 2d con
los datos que irán en las filas

JTable(Object[][] data, String[] nombres_columnas)

Dada la complejidad de las JTable, es recomendable seguir la información oficial en la web de Oracle (How to use JTable)




***Imagenes***

Incluimos la imagen dentro un JLabel,  accedemos a él por su método Getter

panelInicial.getLabelImagen().setIcon(new ImageIcon("src\\imagenes\\coche_fantastico.jpg"))

Para incluir imagenes en un ejecutable deben ir una carpeta junto con dicho ejecutable











